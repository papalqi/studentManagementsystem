/**
 * <p>Title: StudentController.java<／p>
 * <p>Copyright: Copyright (c) 2018<／p>
 * <p>Company: Oracle Group4<／p>
 * @author XuChongtian
 * @date 2018年3月13日
 * @version 1.0
 */
package com.studentgrade.controller;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.ibatis.session.SqlSession;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.studentgrade.backinfo.GetStudentGradeListInfo;
import com.studentgrade.backinfo.OpenCourseListInfo;
import com.studentgrade.backinfo.StatusListT;
import com.studentgrade.backinfo.StudentCourseTableListInfo;
import com.studentgrade.bean.Person;
import com.studentgrade.bean.Status;
import com.studentgrade.bean.Student;
import com.studentgrade.dao.CourseAMapper;
import com.studentgrade.dao.CourseSMapper;
import com.studentgrade.dao.DatabaseSource;
import com.studentgrade.dao.PersonMapper;
import com.studentgrade.dao.StudentMapper;
import com.studentgrade.method.OnlineCheck;
import com.studentgrade.method.SynchronizeCheck;
import com.studentgrade.model.ClassGradeInfoItem;
import com.studentgrade.model.StudentCourseListItem;

/**
 * <p>Title: StudentController<／p>
 * <p>Description: <／p>
 * <p>Company: Oracle Group4<／p> 
 * @author XuChongtian
 * @date 2018年3月13日
 */
@Controller
public class StudentController {
	
	OnlineCheck onlineCheck = OnlineCheck.newInstance();
	/**
	 * <p>Title: ChangeAdminPassword<／p>
	 * <p>Description: 修改学生密码<／p>
	 */
	@RequestMapping(value = "/ChangeStudentPassword")
	@ResponseBody
	public Status ChangeAdminPassword(HttpServletResponse response, HttpServletRequest request,
			@RequestParam(value = "cookie") String cookie, @RequestParam(value = "username") BigDecimal username, 
			@RequestParam(value = "newpassword") String newpassword, @RequestParam(value = "oldpassword") String oldpassword){
		Status status = new Status();
		HttpSession session = request.getSession();
		SqlSession sqlSession = DatabaseSource.getSessionFactory().openSession();
		
		if (session.getId().equals(cookie)) {
			try {
				PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class);
				StudentMapper studentMapper = sqlSession.getMapper(StudentMapper.class);
				
				Student student = studentMapper.selectByPrimaryKey(username);
				if(student.getIid()!=null){
					Person person = personMapper.selectByPrimaryKey(student.getIid());
					if (person.getSpassword().equals(oldpassword)) {
						person.setSpassword(newpassword);
						try {
							personMapper.updateByPrimaryKeySelective(person);
							sqlSession.commit();
							System.out.println("修改密码（学生）信息成功");
							
							status.setStatus(200);
							status.setInfo("success");
						} catch (Exception e) {
							// TODO: handle exception
							System.out.println("修改密码（学生）信息没有找到账号");
							
							status.setStatus(400);
							status.setInfo("error1");
						}
					} else {
						System.out.println("修改密码（学生）旧密码错误");
						
						status.setStatus(400);
						status.setInfo("oldpassword not equal");
					}
				}else {
					System.out.println("修改密码（学生）信息没有找到账号");
					
					status.setStatus(400);
					status.setInfo("fail");
				}
			} catch (Exception e) {
				// TODO: handle exception
				System.out.println("修改密码（学生）error");
				
				status.setStatus(400);
				status.setInfo("error");
			}
		} else {
			System.out.println("修改密码（学生）信息超时");
			
			status.setStatus(408);
			status.setInfo("time out");
			onlineCheck.deleteNo(cookie);
		}
		
		return status;
	}
	
	/**
	 * <p>Title: SelectCanChoiseCourse<／p>
	 * <p>Description: 查看可选课程<／p>
	 */
	@RequestMapping(value = "/SelectCanChoiseCourse")
	@ResponseBody
	public OpenCourseListInfo SelectCanChoiseCourse(HttpServletRequest request, HttpServletResponse response,
			@RequestParam(value = "cookie") String cookie, @RequestParam(value = "context") String context){
		OpenCourseListInfo info = new OpenCourseListInfo();
		HttpSession session = request.getSession();
		SqlSession sqlSession = DatabaseSource.getSessionFactory().openSession();
		
		if (session.getId().equals(cookie)) {
			try {
				CourseAMapper courseAMapper = sqlSession.getMapper(CourseAMapper.class);
				info.setInfo(courseAMapper.getCanChoiceCourseList(context));
				
				System.out.println("查看可选课程信息success");
				
				info.setStatus(200);
			} catch (Exception e) {
				// TODO: handle exception
				System.out.println("查看可选课程信息error");
				
				info.setStatus(400);
			}
		} else {
			System.out.println("查看可选课程信息超时");
			
			info.setStatus(408);
			onlineCheck.deleteNo(cookie);
		}
		
		
		return info;
	}
	/**
	 * <p>Title: ChoiseCourse<／p>
	 * <p>Description:学生选课 <／p>
	 */
	@RequestMapping(value = "/ChoiseCourse")
	@ResponseBody
	public Status ChoiseCourse(HttpServletResponse response, HttpServletRequest request,
			@RequestParam(value = "cookie") String cookie, @RequestParam(value = "couid") BigDecimal couid, 
			@RequestParam(value = "stuid") BigDecimal stuid){
		Status status = new Status();
		HttpSession session = request.getSession();
		//SqlSession sqlSession = DatabaseSource.getSessionFactory().openSession();
		
		if (session.getId().equals(cookie)) {
			try {
				if (SynchronizeCheck.StudentChoiceCourse(couid, stuid)) {
					
					System.out.println("选课（学生）信息success");
					
					status.setStatus(200);
					status.setInfo("success");
				} else {
					System.out.println("选课（学生）信息fail");
					
					status.setStatus(401);
					status.setInfo("fail");
				}
				
			} catch (Exception e) {
				// TODO: handle exception
				System.out.println("选课（学生）信息error");
				
				status.setStatus(400);
				status.setInfo("error");
			}
		} else {
			System.out.println("选课（学生）信息超时");
			
			status.setStatus(408);
			status.setInfo("time out");
			onlineCheck.deleteNo(cookie);
		}
		
		return status;
	}
	
	/**
	 * <p>Title: ChoiseCourse<／p>
	 * <p>Description:学生退课 <／p>
	 */
	@RequestMapping(value = "/DeleteChoiseCourse")
	@ResponseBody
	public Status DeleteChoiseCourse(HttpServletResponse response, HttpServletRequest request,
			@RequestParam(value = "cookie") String cookie, @RequestParam(value = "couid") BigDecimal couid, 
			@RequestParam(value = "stuid") BigDecimal stuid){
		Status status = new Status();
		HttpSession session = request.getSession();
		SqlSession sqlSession = DatabaseSource.getSessionFactory().openSession();
		
		if (session.getId().equals(cookie)) {
			try {
				CourseSMapper courseSMapper = sqlSession.getMapper(CourseSMapper.class);
				
				Map<String, BigDecimal> map = new HashMap<String, BigDecimal>();
				map.put("studentID", stuid);
				map.put("courseID", couid);
				courseSMapper.PstudentTCourse(map);
				
				System.out.println("tui课（学生）信息success");
				
				status.setStatus(200);
				status.setInfo("success");
			} catch (Exception e) {
				// TODO: handle exception
				System.out.println("退课（学生）信息error");
				
				status.setStatus(400);
				status.setInfo("error");
			}
		} else {
			System.out.println("退课（学生）信息超时");
			
			status.setStatus(408);
			status.setInfo("time out");
			onlineCheck.deleteNo(cookie);
		}
		
		return status;
	}
	 
	/**
	 * <p>Title: SelectCanChoiseCourse<／p>
	 * <p>Description: 查看学生课程<／p>
	 */
	@RequestMapping(value = "/SelectStudentCourse")
	@ResponseBody
	public StudentCourseTableListInfo SelectStudentCourse(HttpServletRequest request, HttpServletResponse response,
			@RequestParam(value = "cookie") String cookie, @RequestParam(value = "week") BigDecimal week, 
			@RequestParam(value = "stuid") BigDecimal stuid){
		StudentCourseTableListInfo info = new StudentCourseTableListInfo();
		HttpSession session = request.getSession();
		SqlSession sqlSession = DatabaseSource.getSessionFactory().openSession();
		
		if (session.getId().equals(cookie)) {
			try {
				CourseSMapper courseSMapper = sqlSession.getMapper(CourseSMapper.class);
				
				Map<String, BigDecimal> map = new HashMap<String, BigDecimal>();
				map.put("istudentid", stuid);
				map.put("iweeknumber", week);
				info.setInfo(courseSMapper.getStudentCourseTable(map));
				
				System.out.println("查看学生课程success");
				
				info.setStatus(200);
			} catch (Exception e) {
				// TODO: handle exception
				System.out.println("查看学生课程error");
				
				info.setStatus(400);
			}
		} else {
			System.out.println("查看学生课程超时");
			
			info.setStatus(408);
			onlineCheck.deleteNo(cookie);
		}
		
		
		return info;
	}
	
	/**
	 * <p>Title: SelectStudentGrade<／p>
	 * <p>Description:查看学生成绩 <／p>
	 */
	@RequestMapping(value = "/SelectStudentGrade")
	@ResponseBody
	public GetStudentGradeListInfo SelectStudentGrade(HttpServletRequest request, HttpServletResponse response,
			@RequestParam(value = "cookie") String cookie, @RequestParam(value = "stuid") BigDecimal stuid){
		GetStudentGradeListInfo info = new GetStudentGradeListInfo();
		HttpSession session = request.getSession();
		SqlSession sqlSession = DatabaseSource.getSessionFactory().openSession();
		if (session.getId().equals(cookie)) {
			try {
				CourseSMapper courseSMapper = sqlSession.getMapper(CourseSMapper.class);
				List<ClassGradeInfoItem> list = courseSMapper.getStudentScore(stuid);
				List<ClassGradeInfoItem> list2 = new ArrayList<ClassGradeInfoItem>();
				for (int i = 0; i < list.size(); i++) {
					System.out.println(list.get(i).getBscorestate());
					BigDecimal bscorestate = new BigDecimal(2);
					System.out.println(bscorestate);
					if(list.get(i).getBscorestate()!=null&&list.get(i).getBscorestate().equals(bscorestate)){
						list2.add(list.get(i));
					}else{
						
					}
				}
				info.setInfo(list2);
				System.out.println("查看学生成绩success");
				
				info.setStatus(200);
			} catch (Exception e) {
				// TODO: handle exception
				System.out.println("查看学生成绩error");
				
				info.setStatus(400);
			}
		} else {
			System.out.println("查看学生成绩超时");
			
			info.setStatus(408);
		}

		return info;
	}
	
	/**
	 * <p>Title: SelectStudentChoiseCourse<／p>
	 * <p>Description:查看学生所选课程列表 <／p>
	 */
	@RequestMapping(value = "/SelectStudentChoiseCourse")
	@ResponseBody
	public StatusListT<StudentCourseListItem> SelectStudentChoiseCourse(HttpServletRequest request, HttpServletResponse response,
			@RequestParam(value = "cookie") String cookie, @RequestParam(value = "stuid") BigDecimal stuid){
		StatusListT<StudentCourseListItem> status = new StatusListT<StudentCourseListItem>();
		HttpSession session = request.getSession();
		SqlSession sqlSession = DatabaseSource.getSessionFactory().openSession();
		if (session.getId().equals(cookie)) {
			try {
				CourseSMapper courseSMapper = sqlSession.getMapper(CourseSMapper.class);
				status.setInfo(courseSMapper.getStudentCourseL(stuid));
				
				System.out.println("查看学生所选课程列表success");
				
				status.setStatus(200);
			} catch (Exception e) {
				// TODO: handle exception
				System.out.println("查看学生所选课程列表error");
				
				status.setStatus(400);
			}
		}else {
			System.out.println("查看学生所选课程列表超时");
			
			status.setStatus(408);
		}
		return status;
	}
	
	/**
	 * <p>Title: GetStudentGPA<／p>
	 * <p>Description:查看学生gpa <／p>
	 */
	@RequestMapping(value = "/GetStudentGPA")
	@ResponseBody
	public Status GetStudentGPA(HttpServletRequest request, HttpServletResponse response,
			@RequestParam(value = "cookie") String cookie, @RequestParam(value = "stuid") BigDecimal stuid){
		Status status = new Status();
		HttpSession session = request.getSession();
		SqlSession sqlSession = DatabaseSource.getSessionFactory().openSession();
		if (session.getId().equals(cookie)) {
			try {
				CourseSMapper courseSMapper = sqlSession.getMapper(CourseSMapper.class);
				
				Double aDouble = courseSMapper.getStudentPGA(stuid);
				if (aDouble!=null) {
					status.setInfo(aDouble.toString());
				}		
				System.out.println("查看学生gpa success");
				
				status.setStatus(200);
			} catch (Exception e) {
				// TODO: handle exception
				System.out.println("查看学生gpa error");
				
				status.setStatus(400);
			}
		}else {
			System.out.println("查看学生gpa超时");
			
			status.setStatus(408);
		}
		return status;
	}
	
	/**
	 * <p>Title: GetStudentRank<／p>
	 * <p>Description:查看学生排名 <／p>
	 */
	@RequestMapping(value = "/GetStudentRank")
	@ResponseBody
	public Status GetStudentRank(HttpServletRequest request, HttpServletResponse response,
			@RequestParam(value = "cookie") String cookie, @RequestParam(value = "stuid") BigDecimal stuid){
		Status status = new Status();
		HttpSession session = request.getSession();
		SqlSession sqlSession = DatabaseSource.getSessionFactory().openSession();
		if (session.getId().equals(cookie)) {
			try {
				CourseSMapper courseSMapper = sqlSession.getMapper(CourseSMapper.class);
				BigDecimal a = courseSMapper.getStudentPM(stuid);
				if (a!=null) {
					status.setInfo(a.toString());
				}
				System.out.println("GetStudentRank success");
				
				status.setStatus(200);
			} catch (Exception e) {
				// TODO: handle exception
				System.out.println("GetStudentRank error");
				
				status.setStatus(400);
			}
		}else {
			System.out.println("GetStudentRank超时");
			
			status.setStatus(408);
		}
		return status;
	}
}
